# dvt/symbolic.py (Versi√≥n Adaptada y Robusta)
"""
Construcci√≥n simb√≥lica del n√∫cleo DVT (ecuaciones de campo) y
exportaci√≥n de las funciones num√©ricas *phi_ddot_func* y *a_ddot_func*.

Esta versi√≥n ha sido adaptada para garantizar la m√°xima estabilidad y correctitud
en conjunto con los rangos de prior ampliados del nuevo mcmc.py.

Caracter√≠sticas clave
--------------------
* Derivaci√≥n autom√°tica y garantizada mediante sp.euler_equations.
* Simplificaci√≥n num√©ricamente estable con sp.cancel para expresiones racionales.
* Lambdify robusto que convierte expresiones a escalares float finitos.
* Cach√© cloudpickle para arranques subsecuentes ultrarr√°pidos.
"""
from __future__ import annotations

import os
import pickle
import warnings
from pathlib import Path
from typing import Callable, Tuple

import numpy as np
import sympy as sp

from .config import logger
try:
    import cloudpickle as pickle
except ImportError:
    import pickle

###############################################################################
# 1 ‚ñ™ S√≠mbolos globales y archivo de cach√©
###############################################################################

# Variables simb√≥licas usadas en todas las expresiones.
_DEF_VARS = [sp.Symbol(s) for s in ("phi", "phi_dot", "a", "a_dot", "G", "xi")]

CACHE_SYM: Path = Path(__file__).with_suffix(".symcache")

###############################################################################
# 2 ‚ñ™ Conversor robusto -> float
###############################################################################

def _scalarizer(f: Callable[..., float]) -> Callable[..., float]:
    """Envuelve `f` para que siempre devuelva un *float* finito o `np.nan`."""

    def _wrap(*args):
        out = f(*args)
        if isinstance(out, np.ndarray) and out.shape == ():
            out = out.item()
        if isinstance(out, sp.Expr):
            if out is sp.zoo or out is sp.oo or out is -sp.oo:
                return np.inf * np.sign(float(out.evalf(1)))
            try:
                return float(out.evalf())
            except (TypeError, ValueError):
                return np.nan
        if isinstance(out, np.ndarray) and out.dtype == object:
            vfunc = np.vectorize(
                lambda z: float(z.evalf()) if isinstance(z, sp.Expr) else z,
                otypes=[float],
            )
            arr = out.ravel()
            return float(vfunc(arr)[0])
        try:
            return float(out)
        except Exception:
            return np.nan

    return _wrap

###############################################################################
# 3 ‚ñ™ Construcci√≥n de las ecuaciones (Versi√≥n Robusta)
###############################################################################

def _build_symbolic() -> Tuple[sp.Expr, sp.Expr]:
    """
    Deriva y devuelve las expresiones SymPy para ddot(phi) y ddot(a)
    usando el m√©todo de Euler-Lagrange para m√°xima robustez.
    """
    # --- Definici√≥n de S√≠mbolos y Funciones ---
    t = sp.Symbol("t")
    phi_func = sp.Function("phi")(t)
    a_func = sp.Function("a")(t)
    V_func = sp.Function("V")(phi_func)
    G, xi = sp.symbols("G xi")
    
    # Derivadas
    phi_dot = sp.diff(phi_func, t)
    phi_ddot = sp.diff(phi_dot, t)
    a_dot = sp.diff(a_func, t)
    a_ddot = sp.diff(a_dot, t)

    # --- Construcci√≥n del Lagrangiano ---
    # Escalar de Ricci para un universo FLRW plano (k=0)
    R = 6 * (a_ddot / a_func + (a_dot / a_func)**2)

    # Lagrangiano con acoplamiento no m√≠nimo
    L = R / (16 * sp.pi * G) - (0.5 * phi_dot**2 - V_func) - 0.5 * xi * R * phi_func**2

    # --- Derivaci√≥n Autom√°tica con Euler-Lagrange ---
    # Este m√©todo es superior a la derivaci√≥n manual, ya que es menos propenso a errores.
    eqs = sp.euler_equations(L, [phi_func, a_func], t)

    # --- Resoluci√≥n del Sistema de Ecuaciones ---
    # Resolvemos el sistema de EDOs para las segundas derivadas
    soluciones = sp.solve(eqs, [phi_ddot, a_ddot], dict=True)
    if not soluciones:
        raise RuntimeError("No se pudo resolver el sistema de EDOs para phi_ddot y a_ddot.")
    
    sol = soluciones[0]
    e_phi = sol[phi_ddot]
    e_a = sol[a_ddot]

    # --- Simplificaci√≥n Num√©ricamente Estable ---
    # Usamos sp.cancel para obtener una forma p/q, que es m√°s estable
    # para funciones racionales. Esto es clave para la estabilidad num√©rica.
    e_phi_cancelled = sp.cancel(e_phi)
    e_a_cancelled = sp.cancel(e_a)
    
    # NOTA SOBRE LA ESTABILIDAD:
    # Las expresiones resultantes tendr√°n un denominador com√∫n proporcional a:
    # (1 - 8*pi*G*xi*phi^2).
    # Este t√©rmino puede anularse, creando una singularidad f√≠sica.
    # Este m√≥dulo, symbolic.py, entrega la forma matem√°tica correcta.
    # La responsabilidad de manejar esta singularidad recae en el m√≥dulo num√©rico
    # (solver.py), que ya implementa chequeos para detener la integraci√≥n
    # si el sistema se acerca a este punto cr√≠tico.
    
    # Reemplazamos las funciones por s√≠mbolos para el lambdify
    phi_sym, phi_dot_sym, a_sym, a_dot_sym = _DEF_VARS[:4]
    V_sym, dV_sym = sp.symbols("V dV")
    
    subs_dict = {
        phi_func: phi_sym, a_func: a_sym,
        phi_dot: phi_dot_sym, a_dot: a_dot_sym,
        sp.diff(V_func, phi_func): dV_sym, V_func: V_sym,
    }

    return e_phi_cancelled.subs(subs_dict), e_a_cancelled.subs(subs_dict)

###############################################################################
# 4 ‚ñ™ Creaci√≥n de funciones num√©ricas + cach√©
###############################################################################

def _make_lambdify(e_phi: sp.Expr, e_a: sp.Expr) -> Tuple[Callable[..., float], Callable[..., float]]:
    """Lambdify robusto y envuelto con _scalarizer."""
    if e_phi.has(sp.Derivative) or e_a.has(sp.Derivative):
        raise RuntimeError("Las expresiones todav√≠a contienen derivadas simb√≥licas no resueltas.")

    variables = _DEF_VARS + [sp.Symbol("V"), sp.Symbol("dV")]
    try:
        raw_phi = sp.lambdify(variables, e_phi, modules=["numpy", "sympy", "mpmath"])
        raw_a = sp.lambdify(variables, e_a, modules=["numpy", "sympy", "mpmath"])
    except Exception as exc:
        logger.error("Fallo al lambdificar: %s", exc)
        raise

    return _scalarizer(raw_phi), _scalarizer(raw_a)


def _load_or_build_funcs() -> Tuple[Callable[..., float], Callable[..., float]]:
    """Carga las funciones de `.symcache` o las reconstruye."""
    if CACHE_SYM.exists() and CACHE_SYM.stat().st_size > 0:
        try:
            with CACHE_SYM.open("rb") as fh:
                logger.info("‚è© Cargando ecuaciones cacheadas de %s", CACHE_SYM.name)
                return pickle.load(fh)
        except Exception as exc:
            warnings.warn(f"Fallo al leer la cach√© {CACHE_SYM}: {exc} ‚Äî regenerando", RuntimeWarning)

    logger.info("üõ† Generando ecuaciones simb√≥licas DVT (primera ejecuci√≥n)...")
    e_phi, e_a = _build_symbolic()
    funcs = _make_lambdify(e_phi, e_a)

    try:
        with CACHE_SYM.open("wb") as fh:
            pickle.dump(funcs, fh)
        logger.info("Ecuaciones cacheadas en %s para futuras ejecuciones.", CACHE_SYM)
    except Exception as exc:
        warnings.warn(f"No se pudo guardar la cach√© {CACHE_SYM}: {exc}")

    return funcs

###############################################################################
# 5 ‚ñ™ API p√∫blica
###############################################################################

phi_ddot_func, a_ddot_func = _load_or_build_funcs()

__all__ = [
    "phi_ddot_func",
    "a_ddot_func",
]
